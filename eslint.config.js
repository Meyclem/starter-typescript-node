import jsESLint from "@eslint/js";
import stylistic from "@stylistic/eslint-plugin";
import tsESLint from "@typescript-eslint/eslint-plugin";
import tsParser from "@typescript-eslint/parser";
import imprt from "eslint-plugin-import";
import globals from "globals";

const guidelinesRules = {
  files: ["**/*.ts"],
  rules: {
    /*
     * ---- ESLint Rules -----
     * Possible Problems (https://eslint.org/docs/rules/#possible-problems)
     */
    "no-duplicate-imports": "off",
    "no-self-compare": "error",
    "no-use-before-define": "warn",
    /*
     * ---- ESLint Rules -----
     * Suggestions (https://eslint.org/docs/rules/#suggestions)
     */
    "block-scoped-var": "error",
    "class-methods-use-this": "error",
    complexity: "off",
    "consistent-return": "off",
    "consistent-this": "error",
    "default-case-last": "error",
    "default-case": "error",
    "default-param-last": "error",
    "dot-notation": "error",
    eqeqeq: "error",
    "func-name-matching": "off",
    "func-names": "error",
    "func-style": ["error", "declaration", { allowArrowFunctions: true }],
    "grouped-accessor-pairs": "error",
    "guard-for-in": "error",
    "id-denylist": ["warn", "req", "res", "e", "err", "cb"],
    "id-length": "off",
    "id-match": "off",
    "init-declarations": "off",
    "max-classes-per-file": "off",
    "max-depth": "warn",
    "max-lines": "off",
    "max-nested-callbacks": ["error", 5],
    "max-params": ["error", 6],
    "max-statements": "off",
    "no-alert": "error",
    "no-array-constructor": "error",
    "no-bitwise": "error",
    "no-caller": "error",
    "no-case-declarations": "warn",
    "no-console": "error",
    "no-continue": "error",
    "no-delete-var": "error",
    "no-div-regex": "error",
    "no-else-return": "error",
    "no-empty": "error",
    "no-empty-function": "error",
    "no-eq-null": "error",
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-label": "error",
    "no-global-assign": "error",
    "no-implicit-coercion": ["error", { allow: ["!!"] }],
    "no-implicit-globals": "error",
    "no-implied-eval": "error",
    "no-inline-comments": "warn",
    "no-invalid-this": "off",
    "no-iterator": "error",
    "no-label-var": "error",
    "no-labels": "error",
    "no-lone-blocks": "error",
    "no-lonely-if": "error",
    "no-loop-func": "error",
    "no-magic-numbers": "off",
    "no-multi-assign": "error",
    "no-multi-str": "off",
    "no-negated-condition": "off",
    "no-nested-ternary": "error",
    "no-new-func": "error",
    "no-new-wrappers": "error",
    "no-new": "error",
    "no-nonoctal-decimal-escape": "error",
    "no-octal-escape": "error",
    "no-octal": "error",
    "no-param-reassign": "error",
    "no-plusplus": "warn",
    "no-proto": "error",
    "no-redeclare": "error",
    "no-regex-spaces": "error",
    "no-restricted-exports": "off",
    "no-restricted-globals": "off",
    "no-restricted-imports": "off",
    "no-restricted-properties": "off",
    "no-return-assign": "error",
    "no-script-url": "error",
    "no-sequences": "off",
    "no-shadow-restricted-names": "error",
    "no-ternary": "off",
    "no-throw-literal": "error",
    "no-undef-init": "error",
    "no-undefined": "off",
    "no-underscore-dangle": "off",
    "no-unneeded-ternary": "error",
    "no-unused-expressions": "error",
    "no-unused-labels": "error",
    "no-useless-call": "error",
    "no-useless-catch": "error",
    "no-useless-computed-key": "error",
    "no-useless-concat": "error",
    "no-useless-constructor": "error",
    "no-useless-escape": "error",
    "no-useless-rename": "error",
    "no-useless-return": "error",
    "no-var": "error",
    "no-void": "error",
    "no-warning-comments": "off",
    "no-with": "error",
    "object-shorthand": "error",
    "one-var": ["error", "never"],
    "operator-assignment": ["error", "always"],
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "prefer-destructuring": "off",
    "prefer-exponentiation-operator": "error",
    "prefer-named-capture-group": "error",
    "prefer-numeric-literals": "error",
    "prefer-object-has-own": "error",
    "prefer-object-spread": "error",
    "prefer-promise-reject-errors": "off",
    "prefer-regex-literals": "off",
    "prefer-rest-params": "error",
    "prefer-spread": "error",
    "prefer-template": "error",
    "require-await": "warn",
    "require-yield": "error",
    "sort-imports": "off",
    "sort-keys": "off",
    "sort-vars": "off",
    strict: "off",
    "symbol-description": "error",
    "vars-on-top": "error",
    yoda: "error",
  },
};

const javascriptGuidelineRules = {
  files: ["**/*.js", "**/*.cjs", "**/*.mjs"],
  rules: {
    "prefer-named-capture-group": "warn",
    "prefer-template": "warn",
    "no-else-return": "error",
    "require-await": "warn",
    "guard-for-in": "error",
    "no-unused-vars": "error",
    "func-names": "error",
  },
};

const stylisticRules = {
  files: ["**/*.ts", "**/*.js", "**/*.cjs", "**/*.mjs"],
  plugins: {
    "@stylistic": stylistic,
    import: imprt,
  },
  rules: {
    /* --- Code formating ---- */
    "@stylistic/indent": ["warn", 2],
    "@stylistic/eol-last": "warn",
    curly: "warn",
    "@stylistic/array-bracket-newline": ["warn", { multiline: true }],
    "@stylistic/array-bracket-spacing": ["warn", "never"],
    "@stylistic/array-element-newline": ["warn", "consistent"],
    "@stylistic/arrow-spacing": "warn",
    "@stylistic/brace-style": "warn",
    "@stylistic/comma-spacing": ["warn", { before: false, after: true }],
    "@stylistic/comma-dangle": ["warn", "always-multiline"],
    "@stylistic/comma-style": ["warn", "last"],
    "@stylistic/computed-property-spacing": "warn",
    "@stylistic/dot-location": ["warn", "property"],
    "@stylistic/function-call-spacing": ["warn", "never"],
    "@stylistic/function-call-argument-newline": ["warn", "consistent"],
    "@stylistic/function-paren-newline": ["warn", "multiline-arguments"],
    "@stylistic/generator-star-spacing": [
      "warn",
      {
        before: false,
        after: true,
      },
    ],
    "@stylistic/key-spacing": ["warn", { mode: "strict" }],
    "@stylistic/keyword-spacing": "warn",
    "@stylistic/linebreak-style": "warn",
    "@stylistic/max-len": [
      "warn",
      { code: 120, ignoreTemplateLiterals: false, ignoreComments: true },
    ],
    "@stylistic/max-statements-per-line": ["warn", { max: 1 }],
    "@stylistic/new-parens": "warn",
    "@stylistic/newline-per-chained-call": "warn",
    "@stylistic/no-mixed-spaces-and-tabs": ["warn", "smart-tabs"],
    "@stylistic/no-multi-spaces": "warn",
    "@stylistic/no-multiple-empty-lines": ["warn", { max: 1 }],
    "@stylistic/no-trailing-spaces": ["warn", { skipBlankLines: true }],
    "@stylistic/no-whitespace-before-property": "warn",
    "@stylistic/nonblock-statement-body-position": ["warn", "below"],
    "@stylistic/object-curly-spacing": ["warn", "always"],
    "@stylistic/object-property-newline": "off",
    "@stylistic/operator-linebreak": ["warn", "before"],
    "@stylistic/padded-blocks": ["warn", "never"],
    "@stylistic/quotes": ["warn", "double", { allowTemplateLiterals: "always" }],
    "@stylistic/rest-spread-spacing": "warn",
    "@stylistic/semi": ["warn", "always"],
    "@stylistic/semi-spacing": "warn",
    "@stylistic/semi-style": ["warn", "last"],
    "@stylistic/space-before-blocks": [
      "warn",
      { functions: "always", keywords: "always", classes: "always" },
    ],
    "@stylistic/space-before-function-paren": "off",
    "@stylistic/space-in-parens": ["warn", "never"],
    "@stylistic/space-infix-ops": "warn",
    "@stylistic/space-unary-ops": [
      "warn",
      {
        words: true,
        nonwords: false,
      },
    ],
    "@stylistic/switch-colon-spacing": "warn",
    "@stylistic/template-curly-spacing": "warn",
    "@stylistic/template-tag-spacing": "warn",

    /* --- Import rules: https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/order.md ---- */
    "import/order": [
      "warn",
      {
        "newlines-between": "always",
        alphabetize: {
          order: "asc",
          caseInsensitive: true,
        },
        /* https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/order.md#pathgroups-array-of-objects */
        pathGroups: [],
        /* https://github.com/import-js/eslint-plugin-import/blob/main/docs/rules/order.md#pathgroupsexcludedimporttypes-array */
        pathGroupsExcludedImportTypes: [],
      },
    ],
  },
};

const unitTestRules = {
  files: ["**/tests/**/*.test.ts"],
  languageOptions: {
    parser: tsParser,
    parserOptions: {
      ecmaFeatures: { modules: true },
      ecmaVersion: "latest",
      project: "./tsconfig.vitest.json",
    },
    globals: {
      ...globals.jest,
    },
  },
  rules: {
    "no-empty-function": "off",
    "require-await": "warn",
    "@typescript-eslint/ban-ts-comment": "warn",
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-var-requires": "error",
    "prefer-const": "error",
    "no-duplicate-imports": "off",
    "no-else-return": "error",
    "no-prototype-builtins": "error",
    eqeqeq: "error",
    "no-async-promise-executor": "error",
    "dot-notation": "off",
    "no-fallthrough": "error",
    "default-case": "error",
    "object-shorthand": "error",
    "prefer-template": "error",
  },
};

const typescriptRules = {
  files: ["**/*.ts"],
  languageOptions: {
    parser: tsParser,
    parserOptions: {
      ecmaFeatures: { modules: true },
      ecmaVersion: "latest",
      project: "./tsconfig.json",
    },
  },
  plugins: {
    "@typescript-eslint": tsESLint,
  },
  rules: {
    ...tsESLint.configs["eslint-recommended"].rules,
    ...tsESLint.configs.recommended.rules,
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/no-unused-vars": "error",
  },
};

export default [
  {
    ignores: ["dist", "public", "**.config.{js,ts,cjs}", "**/pet-store.d.ts"],
  },
  {
    languageOptions: {
      globals: {
        ...globals.node,
      },
    },
  },
  jsESLint.configs.recommended,
  typescriptRules,
  stylisticRules,
  guidelinesRules,
  javascriptGuidelineRules,
  unitTestRules,
];
